generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String          @id @default(cuid()) @map("_id")
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  projectMembers ProjectMember[]
  taskAssignees  TaskAssignee[]
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String          @id @default(cuid()) @map("_id")
  name        String
  description String?
  website_url String?
  image_url   String
  github_url  String?
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  members     ProjectMember[]
  columns     Column[]
  tags        Tag[]
}

model ProjectMember {
  id        String  @id @default(cuid()) @map("_id")
  userId    String
  projectId String
  role      String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Column {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  order  Int
  tasks     Task[]
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Task {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  order      Int
  content    String?
  tagId      String?
  columnId   String @db.ObjectId
  assignees  TaskAssignee[]
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  column     Column         @relation(fields: [columnId], references: [id], onDelete: Cascade)
  tag        Tag?           @relation(fields: [tagId], references: [id], onDelete: SetNull)
  @@index([columnId])
}

model TaskAssignee {
  id     String @id @default(cuid()) @map("_id")
  taskId String @db.ObjectId
  userId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
}

model Tag {
  id        String  @id @default(cuid()) @map("_id")
  name      String
  color     String
  projectId String
  tasks     Task[]
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
